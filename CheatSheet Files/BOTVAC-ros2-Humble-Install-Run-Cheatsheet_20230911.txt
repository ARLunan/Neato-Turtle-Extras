Neato(R) Turtle ROS2 Humble Install & Run Cheatsheet	by Ross Lunan (arlunan@ieee.org)
/Users/Ross/Documents/ROS Projects/Botvac-ROS2

Late Breaking News regarding the ROS 2 Iron distribution: The Botvac packages can be cloned with a successful rosdep & build on a Ubuntu 22.04 / ROS2 Iron arm64 and amd64 systems. Keyboard or Game Controller Gamepad teleop can drive the Botvac. However, there is an issue with navigation2. The binary install loads most of the nav2 packlages, except for the essential nav2_bringup and nav2_system-tests packages, due incompatibilities with unavailable Iron Gazebo Classic packages.

Based on Neato Turtle in "Homebrewed Robots!" by Camp Peavy 
https://github.com/cpeavy2/botvac_node

Note: These scripts assume navigation2 is installed from Debian Repository and map.yaml files are saved at /home/ubuntu/Desktop/maps where Username = ubuntu > change these scripts if username is different
Desktop: Location to save maps: mkdir -p /home/ubuntu/Desktop/maps

Optional Game Controller (Logitech F710 or Sony PS4): For F710 Input Standard Select "X" (NOT "D") & Mode "Flight" Green LED OFF, location of configuration .yaml files: On Remote Desktop or SBC Robot -  mkdir -p /home/ubuntu/Desktop/config .

Optional ROS 2 USB Camera Package ros_drivers/usb_camera installed on SBC Robot with custom low resolution & framerate configuration file "params10.yaml" saved to ~/Desktop/usb_camera/config
_____________
Desktop or Robot: Location for Game Controller configuration .yaml files: mkdir -p /home/ubuntu/Desktop/config
Robot: Location for usb_cam configuration params10.yaml file: mkdir -p /home/ubuntu/Desktop/usb_cam/config

For Server RasPi, to copy config files from 

INSTALL
cpeavy2/botvac_node https://github.com/cpeavy2/botvac_node

On WORKSTATION
sudo apt install build-essential sudo apt install ros-humble-xacro sudo apt install python3-rosdep
sudo apt install ros-humble-navigation2 ros-humble-nav2-bringup
sudo apt install top tree
Optional gamepad: sudo apt install teleop_twist_joy

On ROBOT
sudo apt install build-essential sudo apt install ros-humble-xacro sudo apt install python3-rosdep
sudo apt install tree
Optional gamepad: sudo apt install teleop-twist-joy
Optional WebCam: sudo apt install ros-humble-usb-cam 

$ mkdir -p botvac_ws/src
$ cd botvac_ws/src
git clone https://github.com/cpeavy2/botvac_node.git
git clone https://github.com/cpeavy2/neato_robot.git
git clone https://github.com/kobuki-base/cmd_vel_mux.git
git clone https://github.com/kobuki-base/kobuki_velocity_smoother
git clone https://github.com/stonier/ecl_tools

cd ..
$ rosdep update
$ rosdep install --from-paths src --ignore-src -r -y
And finally, go back to your workspace directory and compile the code.
$ cd ~/botvac_ws
$ botvac_ws
   colcon build

source ~/botvac_ws/install/setup.bash        # sources setup.bash for current session
echo 'source ~/botvac_ws/install/setup.bash' >> ~/.bashrc	# sources setup.bash for future sessions. Use your own ROS workspace.

Set RasPi Serial Permissions
$ sudo adduser user $(stat --format="%G" /dev/ttyACM0 )
__________________________________________________________________
RUN (From Desktop Machine: $ sudo ssh ubuntu@rp4-ub22h.bv.local into Robot RasPi, using your user and machine name)
__________________________________________________________________
ROBOT RPI4

With cable plugged between USB Ports on RasPi Robot and Neato Botvac Diagnostic port (ls -l /dev/ttyACM0)
$ ros2 launch botvac_node botvac_base.launch.py

Optional Game Controller connected to ROBOT, provided ps4.config.yaml or f710.config.yaml are saved to /home/ubuntu/Desktop/config folder

$ ros2 launch teleop_twist_joy teleop-launch.py config_filepath:='/home/ubuntu/Desktop/config/ps4.config.yaml'

$ ros2 launch teleop_twist_joy teleop-launch.py config_filepath:='/home/ubuntu/Desktop/config/f710.config.yaml'

Optional Camera Image from a WebCam connected to a Robot USB port. Run from SBC RasPi Robot: 
$ ros2 run usb_cam usb_cam_node_exe --ros-args --params-file /home/ubuntu/Desktop/usb_cam/config/params10.yaml
__________________________________________________________________
WORKSTATION Launch SLAM Toolbox, rviz & Teleop in separate windows
Rename map.yaml & map.pgm when ceeating a new map

$ ros2 launch nav2_bringup bringup_launch.py use_sim_time:=False autostart:=True map:=/home/user/Desktop/maps/map.yaml slam:=True
$ ros2 launch nav2_bringup rviz_launch.py

$ ros2 run teleop_twist_keyboard teleop_twist_keyboard
__________________________________________________________________
OR with optional Game Controller Game Controller teleop_twist, configured with provided ps4.config.yaml or f710.config.yaml saved to /user/ubuntu/Desktop/config folder
Check /dev/input/jsX with jstest-gtk

PS3/4 Joystick on RemotePC (either MAC M1 or Intel/AMD PC): Plugin Bluetooth USB Dongle - Connect PS4 & Press Share-PS Button to Pair.
$ ros2 launch teleop_twist_joy teleop-launch.py config_filepath:='/home/ubuntu/Desktop/config/ps4.config.yaml'joy_dev:='/dev/input/js0'
OR 
OR Plugin Logitech USB Dongle - Connect F710 
On Intel Desktop
$ ros2 launch teleop_twist_joy teleop-launch.py config_filepath:='/home/ubuntu/Desktop/config/f710.config.yaml' joy_dev:='/dev/input/js0'
OR on MAC VM 
$ ros2 launch teleop_twist_joy teleop-launch.py config_filepath:='/home/ubuntu/Desktop/config/f710.config.yaml' joy_dev:='/dev/input/js1'

To test Joystick:
topic DIAGNOSTICS (In separate windows)
$ ros2 topic echo /joy
$ ros2 topic echo /cmd_vel
$ ros2 topic info /cmd_vel
___________________________________________________________________________
Optional Camera Image from a WebCam connected to the a Robot USB port
$ ros2 run rqt_image_view rqt_image_view
____________________________________________________________________________
Save the MAP

$ ros2 run nav2_map_server map_saver_cli -f /home/ubuntu/Desktop/maps/map --ros-args -p save_map_timeout:=5000.0

Kill the Toolbox and rviz by closing Terminal Window with CTRL-c
____________________________________________________________________________
Relaunch SLAM

$ ros2 launch nav2_bringup bringup_launch.py use_sim_time:=False autostart:=True map:=/home/ubuntu/Desktop/maps/map.yaml

$ ros2 launch nav2_bringup rviz_launch.py
Click 2D Pose Estimate and place robot on map
Set Navigational Goal

Waypoint Navigation 
Click "Waypoint/Nav Through Poses Mode", Click 2 or 3 "Nav2 Goal" , Click "Startup" 

rqt DIAGNOSTICS
$ rqt_gui Select Plugins - Topics - Node graph - Visualization
$ ros2 run rqt_graph
___________________________________________________________________________
When Done: On the RasPi Robot, STOP the botvac_node with ctrl-C .


